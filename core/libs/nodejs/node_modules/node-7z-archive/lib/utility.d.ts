import when from 'when';
export declare const Binary: (override?: boolean, binary?: string) => {
    path: string;
    filename: string;
    filepath: string;
};
/**
 * Transform a list of files that can be an array or a string into a string
 * that can be passed to the `run` function as part of the `command` parameter.
 * @param  {string|array} files
 * @return {string}
 */
export declare const Files: (files: string | string[]) => string;
/**
 * @param {string} path A path with the native directory separator.
 * @return {string} A path with / for directory separator.
 */
export declare const ReplaceNativeSeparator: (path: string) => string;
/**
 * @param {string} binary which binary to use.
 * @param {string} command The command to run.
 * @param {Array} switches Options for 7-Zip as an array.
 * @param {boolean} override should binary directory change?
 *
 * @progress {string} stdout message.
 * @reject {Error} The error issued by 7-Zip.
 * @reject {number} Exit code issued by 7-Zip.
 *
 * @returns {Promise} Promise
 */
export declare function Run(binary?: string, command?: string | null, switches?: {
    files?: string[];
}, override?: boolean): when.Promise<string[]>;
/**
 * Transform an object of options into an array that can be passed to the
 * spawned child process.
 * @param  {Object} switches An object of options
 * @return {array} Array to pass to the `run` function.
 */
export declare const Switches: (switches: Record<string, any>) => any[];
