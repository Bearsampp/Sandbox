import when from 'when';
/**
 * Create/add content to an archive.
 *
 * @param filepath {string} Path to the archive.
 * @param files {string|array} Files to add.
 * @param options {Object} An object of acceptable 7-zip switch options.
 * @param override {boolean} should binary directory change?
 *
 * @resolve {array} Arguments passed to the child-process.
 * @progress {array} Listed files and directories.
 * @reject {Error} The error as issued by 7-Zip.
 *
 * @returns {Promise} Promise
 */
export declare const createArchive: (filepath: string, files: string | string[], options: any, override?: boolean) => when.Promise<string[]>;
/**
 * Delete content from an archive.
 *
 * @param filepath {string} Path to the archive.
 * @param files {string|array} Files to remove.
 * @param options {Object} An object of acceptable 7-zip switch options.
 * @param override {boolean} should binary directory change?
 *
 * @resolve {array} Arguments passed to the child-process.
 * @reject {Error} The error as issued by 7-Zip.
 *
 * @returns {Promise} Promise
 */
export declare const deleteArchive: (filepath: string, files: string | string[], options: {
    files?: string[] | undefined;
} | undefined, override?: boolean) => Promise<string[]>;
/**
 * Extract an archive.
 *
 * @param {string} archive Path to the archive.
 * @param {string} dest Destination.
 * @param options {Object} An object of acceptable 7-zip switch options.
 * @param override {boolean} should binary directory change?
 *
 * @resolve {array} Arguments passed to the child-process.
 * @progress {array} Extracted files and directories.
 * @reject {Error} The error as issued by 7-Zip.
 *
 * @returns {Promise} Promise
 */
export declare const extractArchive: (filepath: string, dest?: string, options?: {}, override?: boolean) => when.Promise<string[]>;
/**
 * Extract an archive with full paths.
 *
 * @param filepath {string} Path to the archive.
 * @param dest {string} Destination.
 * @param options {Object} An object of acceptable 7-zip switch options.
 * @param override {boolean} should binary directory change?
 *
 * @resolve {array} Arguments passed to the child-process.
 * @progress {array} Extracted files and directories.
 * @reject {Error} The error as issued by 7-Zip.
 *
 * @returns {Promise} Promise
 */
export declare const fullArchive: (filepath: string, dest?: string, options?: {}, override?: boolean) => when.Promise<string[]>;
/**
 * List contents of archive.
 *
 * @param filepath {string} Path to the archive.
 * @param options {Object} An object of acceptable 7-zip switch options.
 * @param override {boolean} should binary directory change?
 *
 * @progress {array} Listed files and directories.
 * @resolve {Object} Tech spec about the archive.
 * @reject {Error} The error as issued by 7-Zip.
 *
 * @returns {Promise} Promise
 */
export declare const listArchive: (filepath: string, options: {
    files?: string[] | undefined;
} | undefined, override?: boolean) => when.Promise<Record<string, any>>;
/**
 * Extract only selected files from archive.
 *
 * @param {string} filepath Path to the archive.
 * @param {string} dest Destination.
 * @param {string|array} files Files in archive to extract.
 * @param options {Object} An object of acceptable 7-zip switch options.
 * @param override {boolean} should binary directory change?
 *
 * @resolve {array} Arguments passed to the child-process.
 * @progress {array} Extracted files and directories.
 * @reject {Error} The error as issued by 7-Zip.
 *
 * @returns {Promise} Promise
 */
export declare const onlyArchive: (filepath: string, dest: string, files: any, options?: {}, override?: boolean) => when.Promise<string[]>;
/**
 * Renames files in archive.
 *
 * @param filepath {string} Path to the archive.
 * @param files {string} Files pairs to rename in archive.
 * @param options {Object} An object of acceptable 7-zip switch options.
 * @param override {boolean} should binary directory change?
 *
 * @resolve {array} Arguments passed to the child-process.
 * @progress {array} Listed files and directories.
 * @reject {Error} The error as issued by 7-Zip.
 *
 * @returns {Promise} Promise
 */
export declare const renameArchive: (filepath: string, files: string | string[], options: {}, override?: boolean) => when.Promise<string[]>;
/**
 * Test integrity of archive.
 *
 * @param filepath {string} Path to the archive.
 * @param options {Object} An object of acceptable 7-zip switch options.
 * @param override {boolean} should binary directory change?
 *
 * @resolve {array} Arguments passed to the child-process.
 * @progress {array} Extracted files and directories.
 * @reject {Error} The error as issued by 7-Zip.
 *
 * @returns {Promise} Promise
 */
export declare const testArchive: (filepath: string, options: {}, override?: boolean) => when.Promise<string[]>;
/**
 * Update content to an archive.
 *
 * @param filepath {string} Path to the archive.
 * @param files {string} Files to update.
 * @param options {Object} An object of acceptable 7-zip switch options.
 * @param override {boolean} should binary directory change?
 *
 * @resolve {array} Arguments passed to the child-process.
 * @progress {array} Listed files and directories.
 * @reject {Error} The error as issued by 7-Zip.
 *
 * @returns {Promise} Promise
 */
export declare const updateArchive: (filepath: string, files: string | string[], options: {}, override?: boolean) => when.Promise<string[]>;
/**
 * Creates Windows self extracting archive, an Installation Package.
 *
 * @param {String} name Application name.
 * @param {Array} files Files to add.
 * @param {String} destination Application root for the `SfxPackages` directory, will default to package root.
 * - All Sfx package archives are stored in the **created** `SfxPackages` directory.
 * - The `destination` directory must already exists.
 * @param {Object} options Object for Installer config and 7-zip switch options.
 *
 * `{`
 *
 * `title:` - Window title message, Default "`name` installation package created on `Current running platform OS`"
 *
 * `beginPrompt:` - Begin Prompt message, Default "Do you want to install `name`?""
 *
 * `progress:` - Value can be "yes" or "no". Default value is "yes".
 *
 * `runProgram:` - Command for executing. Default value is "setup.exe".
 * Substring `% % T` will be replaced with path to temporary folder,
 * where files were extracted
 *
 * `directory:` - Directory prefix for `RunProgram`. Default value is `.\`
 *
 * `executeFile:` Name of file for executing
 *
 * `executeParameters:` Parameters for `ExecuteFile`
 *
 * `}`
 *
 * `NOTE:` There are two ways to run program: `RunProgram` and `ExecuteFile`.
 * - Use `RunProgram`, if you want to run some program from .7z archive.
 * - Use `ExecuteFile`, if you want to open some document from .7z archive or
 * if you want to execute some command from Windows.
 * @param {String} type Application type `gui` or `console`. Default `gui`. Only `console` possible on **Linux** and **Mac** OS.
 *
 * @resolve {string} full filepath
 * @progress {array} Listed files and directories.
 * @reject {Error} The error as issued by 7-Zip.
 *
 * @returns {Promise} Promise
 */
export declare const createSfxWindows: (name: string, files: string[], destination: string | undefined, options: Record<string, any> | undefined, type: string | undefined) => when.Promise<string>;
/**
 * Creates Linux self extracting archive.
 *
 * @param {String} name Application name.
 * @param {Array} files Files to add.
 * @param {String} destination Application root for the `SfxPackages` directory, will default to package root.
 * - All Sfx package archives are stored in the **created** `SfxPackages` directory.
 * - The `destination` directory must already exists.
 * @param {Object} options Object for 7-zip switch options.
 *
 * @resolve {string} full filepath
 * @progress {array} Listed files and directories.
 * @reject {Error} The error as issued by 7-Zip.
 *
 * @returns {Promise} Promise
 */
export declare const createSfxLinux: (name: string, files: string[], destination: string | undefined, options: Record<string, any> | undefined) => when.Promise<string>;
/**
 * Creates Apple macOS self extracting archive.
 *
 * @param {String} name Application name.
 * @param {Array} files Files to add.
 * @param {String} destination Application root for the `SfxPackages` directory, will default to package root.
 * - All Sfx package archives are stored in the **created** `SfxPackages` directory.
 * - The `destination` directory must already exists.
 * @param {Object} options Object for 7-zip switch options.
 *
 * @resolve {string} full filepath
 * @progress {array} Listed files and directories.
 * @reject {Error} The error as issued by 7-Zip.
 *
 * @returns {Promise} Promise
 */
export declare const createSfxMac: (name: string, files: string[], destination: string | undefined, options: Record<string, any> | undefined) => when.Promise<string>;
declare function SevenZip(): void;
declare namespace SevenZip {
    export var createArchive: (filepath: string, files: string | string[], options: any, override?: boolean) => when.Promise<string[]>;
    export var add: (filepath: string, files: string | string[], options: any, override?: boolean) => when.Promise<string[]>;
    export var deleteArchive: (filepath: string, files: string | string[], options: {
        files?: string[] | undefined;
    } | undefined, override?: boolean) => Promise<string[]>;
    var _a: (filepath: string, files: string | string[], options: {
        files?: string[] | undefined;
    } | undefined, override?: boolean) => Promise<string[]>;
    export var extractArchive: (filepath: string, dest?: string, options?: {}, override?: boolean) => when.Promise<string[]>;
    export var extract: (filepath: string, dest?: string, options?: {}, override?: boolean) => when.Promise<string[]>;
    export var fullArchive: (filepath: string, dest?: string, options?: {}, override?: boolean) => when.Promise<string[]>;
    export var extractFull: (filepath: string, dest?: string, options?: {}, override?: boolean) => when.Promise<string[]>;
    export var listArchive: (filepath: string, options: {
        files?: string[] | undefined;
    } | undefined, override?: boolean) => when.Promise<Record<string, any>>;
    export var list: (filepath: string, options: {
        files?: string[] | undefined;
    } | undefined, override?: boolean) => when.Promise<Record<string, any>>;
    export var onlyArchive: (filepath: string, dest: string, files: any, options?: {}, override?: boolean) => when.Promise<string[]>;
    export var only: (filepath: string, dest: string, files: any, options?: {}, override?: boolean) => when.Promise<string[]>;
    export var renameArchive: (filepath: string, files: string | string[], options: {}, override?: boolean) => when.Promise<string[]>;
    export var rename: (filepath: string, files: string | string[], options: {}, override?: boolean) => when.Promise<string[]>;
    export var testArchive: (filepath: string, options: {}, override?: boolean) => when.Promise<string[]>;
    export var test: (filepath: string, options: {}, override?: boolean) => when.Promise<string[]>;
    export var updateArchive: (filepath: string, files: string | string[], options: {}, override?: boolean) => when.Promise<string[]>;
    export var update: (filepath: string, files: string | string[], options: {}, override?: boolean) => when.Promise<string[]>;
    export var windowsSfx: (name: string, files: string[], destination: string | undefined, options: Record<string, any> | undefined, type: string | undefined) => when.Promise<string>;
    export var linuxSfx: (name: string, files: string[], destination: string | undefined, options: Record<string, any> | undefined) => when.Promise<string>;
    export var macSfx: (name: string, files: string[], destination: string | undefined, options: Record<string, any> | undefined) => when.Promise<string>;
    export { _a as delete };
}
export default SevenZip;
export declare const Zip: typeof SevenZip;
